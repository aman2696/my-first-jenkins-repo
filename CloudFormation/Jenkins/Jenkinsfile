pipeline { 

  

  agent { label "master" } 

  

  options { 

    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10')) 

    skipStagesAfterUnstable() 

  } 

  

  parameters { 

    choice ( 

      name: 'Availability_Zone', 

      choices: ["us-east-1a", "us-east-1b", "us-east-1c"], 

      description: 'Availability Zone' 

    ) 

    string ( 

      name : 'INSTANCE_TYPE', 

      defaultValue: 't2.micro', 

      choice : ["t2.micro", "t3.micro"],

      description: 'INSTANCE TYPE OF EC2' 

    ) 

    string ( 

      name : 'SECURITY_GROUP', 

      description: 'SECURITY_GROUP' 

    ) 

   
    string( 

      name: 'AWS_REGION', 

      description: 'AWS_REGION', 

      defaultValue: 'us-east-1' 

    ) 

    string( 

      name: 'CF_STACK_NAME', 

      description: 'Cloudformation Stack Name', 

      defaultValue: 'App-Services-My-EC2' 

    ) 

  } 

  

  stages { 

    stage('CF Stack Opreation ') { 

      steps { 

          /*

          sh '''#!/bin/bash -xe 

          CURRENT_DIRECTORY=`pwd`     

          STACK_NAME=$CF_STACK_NAME 

          echo $CURRENT_DIRECTORY 

          case "$ENVIRONMENT" in 

            travel-qa) ROLE="arn:aws:iam::346319152574:role/travel-qa-deployment-role" 

            ;; 

            travel-stage) ROLE="arn:aws:iam::922451091924:role/travel-stage-deployment-role" 

            ;; 

            travel-prod) ROLE="arn:aws:iam::095218890333:role/travel-prod-deployment-role" 

            ;; 

            *) 

            ;; 

          esac 

  

          aws sts assume-role --role-arn $ROLE --role-session-name TemporarySessionKeys --output json > assume-role-output.json 

  

          AWS_ACCESS_KEY_ID=$(jq .Credentials.AccessKeyId assume-role-output.json) 

  

          AWS_SECRET_ACCESS_KEY=$(jq .Credentials.SecretAccessKey assume-role-output.json) 

  

          AWS_SESSION_TOKEN=$(jq .Credentials.SessionToken assume-role-output.json) 

          export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:1:-1}" 

          export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:1:-1}" 

          export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN:1:-1}" 

  

  

          pwd 

  

          cd "$WORKSPACE""/Cloudformation/Kafka_Setup/" 

          ls -al 

          TEMPLATE_PATH=kafka_template.json 

          PARAMETERS_PATH=kafka_parameters.json 

  

          envsubst < ${PARAMETERS_PATH} > parameters.json 

  

          cat parameters.json 

  

          if ! aws cloudformation describe-stacks --region $AWS_REGION --stack-name $STACK_NAME ; then 

            aws cloudformation create-stack --stack-name $STACK_NAME  --region $AWS_REGION  --template-body "file://"$TEMPLATE_PATH --parameters "file://parameters.json" --capabilities CAPABILITY_IAM --tags "Key"="Owner","Value"="Enablement" "Key"="CreatedBy","Value"="Jenkins" "Key"="Jenkins_Job","Value"="App-Services-Kafka-Setup" 

            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME --region $AWS_REGION 

          else 

            aws cloudformation update-stack --stack-name $STACK_NAME  --region $AWS_REGION  --template-body "file://"$TEMPLATE_PATH --parameters "file://parameters.json" --capabilities CAPABILITY_IAM 

            aws cloudformation wait stack-update-complete --stack-name $STACK_NAME --region $AWS_REGION 

          fi 

  

  

          unset AWS_ACCESS_KEY_ID 

          unset AWS_SECRET_ACCESS_KEY 

          unset AWS_SESSION_TOKEN 

          '''  
          */
          sh '''#!/bin/bash -xe 
          CURRENT_DIRECTORY=`pwd`

          STACK_NAME=$CF_STACK_NAME

          ROLE= "arn:aws:iam::697698451036:instance-profile/EC2Access"
          aws sts assume-role --role-arn $ROLE --role-session-name TemporarySession --output json > assume-role-output.json

          AWS_ACCESS_KEY_ID=$(jq .Credentials.AccessKeyId assume-role-output.json) 
          echo $AWS_ACCESS_KEY_ID
  

          AWS_SECRET_ACCESS_KEY=$(jq .Credentials.SecretAccessKey assume-role-output.json) 

  

          AWS_SESSION_TOKEN=$(jq .Credentials.SessionToken assume-role-output.json) 

          export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:1:-1}" 
          echo $AWS_ACCESS_KEY_ID

          export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:1:-1}" 

          export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN:1:-1}" 

          cd "$WORKSPACE""/Cloudformation/Jenkins/" 

          ls -al 

          TEMPLATE_PATH=template.json 

          PARAMETERS_PATH=parameters.json
          cat parameters.json

          envsubst < ${PARAMETERS_PATH} > parameters.json 

  

          cat parameters.json

          if ! aws cloudformation describe-stacks --region $AWS_REGION --stack-name $STACK_NAME ; then 

            aws cloudformation create-stack --stack-name $STACK_NAME  --region $AWS_REGION  --template-body "file://"$TEMPLATE_PATH --parameters "file://parameters.json" --capabilities CAPABILITY_IAM --tags "Key"="Owner","Value"="Aman" "Key"="CreatedBy","Value"="Jenkins" "Key"="Jenkins_Job","Value"="App-Services-EC2-Setup" 

            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME --region $AWS_REGION 

          else 

            aws cloudformation update-stack --stack-name $STACK_NAME  --region $AWS_REGION  --template-body "file://"$TEMPLATE_PATH --parameters "file://parameters.json" --capabilities CAPABILITY_IAM 

            aws cloudformation wait stack-update-complete --stack-name $STACK_NAME --region $AWS_REGION 

          fi 

  

  

          unset AWS_ACCESS_KEY_ID 

          unset AWS_SECRET_ACCESS_KEY 

          unset AWS_SESSION_TOKEN 


          '''
      } 

    } 

  } 

} 