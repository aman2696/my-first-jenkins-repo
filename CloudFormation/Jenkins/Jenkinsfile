pipeline { 

  

  agent { label "master" } 

  

  options { 

    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10')) 

    skipStagesAfterUnstable() 

  } 

  

  parameters { 

    choice ( 

      name: 'ENVIRONMENT', 

      choices: ["travel-qa", "travel-prod", "travel-stage"], 

      description: 'ENVIRONMENT' 

    ) 

    string ( 

      name : 'PRIVATE_SUBNET_GROUP_ONE', 

      description: 'DATA PRIVATE SUBNET_GROUP_ID' 

    ) 

    string ( 

      name : 'PRIVATE_SUBNET_GROUP_TWO', 

      description: 'DATA PRIVATE SUBNET_GROUP_ID' 

    ) 

    string ( 

      name : 'PRIVATE_SUBNET_GROUP_THREE', 

      description: 'DATA PRIVATE SUBNET_GROUP_ID' 

    ) 

    string ( 

      name : 'INSTANCE_TYPE', 

      defaultValue: 'kafka.m5.xlarge', 

      description: 'INSTANCE_TYPE' 

    ) 

    string ( 

      name : 'SECURITY_GROUP', 

      description: 'SECURITY_GROUP' 

    ) 

    string ( 

      name : 'CLUSTER_NAME', 

      defaultValue: 'app-service-kafka', 

      description: 'CLUSTER_NAME' 

    ) 

    string ( 

      name : 'CLUSTER_VERSION', 

      defaultValue: '2.6.1', 

      description: 'CLUSTER_VERSION' 

    ) 

    string ( 

      name : 'PURPOSE', 

      defaultValue: 'business', 

      description: 'PURPOSE' 

    ) 

    string ( 

      name : 'KMS_KEY_ARN', 

      description: 'KMS_KEY_ARN' 

    ) 

    string ( 

      name : 'VOLUME_SIZE', 

      defaultValue: "100", 

      description: 'PRODUCT_OWNER' 

    ) 

    string( 

      name: 'CONFIGURATION_ARN', 

      description: 'Kafka Configuration ARN' 

    ) 

    string( 

      name: 'AWS_REGION', 

      description: 'AWS_REGION', 

      defaultValue: 'us-east-1' 

    ) 

    string( 

      name: 'LOG_GROUP_NAME', 

      description: 'LOG_GROUP_NAME', 

      defaultValue: 'AppServices-kafka-log' 

    ) 

    string( 

      name: 'LOG_RETENTION', 

      description: 'LOG_RETENTION in days Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.', 

      defaultValue: '7' 

    ) 

    string( 

      name: 'NO_BROKER_NODES', 

      description: 'NO_BROKER_NODES', 

      defaultValue: '3' 

    ) 

    string( 

      name: 'CF_STACK_NAME', 

      description: 'Cloudformation Stack Name', 

      defaultValue: 'App-Services-kafka-stack' 

    ) 

  } 

  

  stages { 

    stage('CF Stack Opreation ') { 

      steps { 

          /*

          sh '''#!/bin/bash -xe 

  

          CURRENT_DIRECTORY=`pwd` 

          

          STACK_NAME=$CF_STACK_NAME 

  

          echo $ENVIRONMENT 

           

          echo $CURRENT_DIRECTORY 

          case "$ENVIRONMENT" in 

            travel-qa) ROLE="arn:aws:iam::346319152574:role/travel-qa-deployment-role" 

            ;; 

            travel-stage) ROLE="arn:aws:iam::922451091924:role/travel-stage-deployment-role" 

            ;; 

            travel-prod) ROLE="arn:aws:iam::095218890333:role/travel-prod-deployment-role" 

            ;; 

            *) 

            ;; 

          esac 

  

          aws sts assume-role --role-arn $ROLE --role-session-name TemporarySessionKeys --output json > assume-role-output.json 

  

          AWS_ACCESS_KEY_ID=$(jq .Credentials.AccessKeyId assume-role-output.json) 

  

          AWS_SECRET_ACCESS_KEY=$(jq .Credentials.SecretAccessKey assume-role-output.json) 

  

          AWS_SESSION_TOKEN=$(jq .Credentials.SessionToken assume-role-output.json) 

          export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID:1:-1}" 

          export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY:1:-1}" 

          export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN:1:-1}" 

  

  

          pwd 

  

          cd "$WORKSPACE""/Cloudformation/Kafka_Setup/" 

          ls -al 

          TEMPLATE_PATH=kafka_template.json 

          PARAMETERS_PATH=kafka_parameters.json 

  

          envsubst < ${PARAMETERS_PATH} > parameters.json 

  

          cat parameters.json 

  

          if ! aws cloudformation describe-stacks --region $AWS_REGION --stack-name $STACK_NAME ; then 

            aws cloudformation create-stack --stack-name $STACK_NAME  --region $AWS_REGION  --template-body "file://"$TEMPLATE_PATH --parameters "file://parameters.json" --capabilities CAPABILITY_IAM --tags "Key"="Owner","Value"="Enablement" "Key"="CreatedBy","Value"="Jenkins" "Key"="Jenkins_Job","Value"="App-Services-Kafka-Setup" 

            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME --region $AWS_REGION 

          else 

            aws cloudformation update-stack --stack-name $STACK_NAME  --region $AWS_REGION  --template-body "file://"$TEMPLATE_PATH --parameters "file://parameters.json" --capabilities CAPABILITY_IAM 

            aws cloudformation wait stack-update-complete --stack-name $STACK_NAME --region $AWS_REGION 

          fi 

  

  

          unset AWS_ACCESS_KEY_ID 

          unset AWS_SECRET_ACCESS_KEY 

          unset AWS_SESSION_TOKEN 

          '''  
          */
          sh '''#!/bin/bash -xe 
          CURRENT_DIRECTORY=`pwd`
          '''
      } 

    } 

  } 

} 